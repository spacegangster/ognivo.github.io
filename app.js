// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['lib/SuperEmitter', 'lib/functions', 'lib/jquery'], function(SuperEmitter, functions, jquery) {
  var $wraps, Jelement, bind, create, delay, delaylong, delaymini, invoke, jelements, map, partial;
  bind = functions.bind, delay = functions.delay, invoke = functions.invoke, map = functions.map, partial = functions.partial;
  delaylong = partial(delay, 2500);
  delaymini = partial(delay, 300);
  create = function(ctor, arg) {
    return new ctor(arg);
  };
  Jelement = (function(_super) {
    __extends(Jelement, _super);

    Jelement.prototype.event_table = [['self', [['blur', ['remove_hovered']]]], ['$element', [['click', ['add_clicked_title', 'delay_remove_clicked']], ['mouseenter', ['cancel_blur', 'log_hover', 'add_hovered']], ['mouseleave', ['delay_blur']]]]];

    function Jelement($element) {
      this.$element = $element;
      Jelement.__super__.constructor.call(this);
    }

    Jelement.prototype.add_hovered = function() {
      return this.$element.addClass('hovered');
    };

    Jelement.prototype.add_clicked_title = function() {
      return this.$element.text('I was clicked');
    };

    Jelement.prototype.delay_blur = function() {
      this.blur_timeout_id = delaymini(bind(this.emit_blur, this));
      return console.log('blur delayed', this.blur_timeout_id);
    };

    Jelement.prototype.delay_remove_clicked = function() {
      var _this = this;
      return delaylong(function() {
        return _this.$element.text('');
      });
    };

    Jelement.prototype.cancel_blur = function() {
      clearTimeout(this.blur_timeout_id);
      return console.log('blur canceled', this.blur_timeout_id);
    };

    Jelement.prototype.emit_blur = function() {
      return this.emit('blur');
    };

    Jelement.prototype.log_hover = function() {
      return console.log('Mouse is on me');
    };

    Jelement.prototype.remove_hovered = function() {
      return this.$element.removeClass('hovered');
    };

    return Jelement;

  })(SuperEmitter);
  $wraps = map($, ['#one', '#two', '#three', '#four']);
  jelements = map(partial(create, Jelement), $wraps);
  return invoke('bind_events', jelements);
});
