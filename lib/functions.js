// Generated by CoffeeScript 1.7.1
(function() {
  define(function() {
    var bind, contains, delay, find_by_first_value_as_key, indexOf, invoke, map, multicall, partial, pluck, remove_at, union, values;
    bind = function(fn, this_arg) {
      return function() {
        return fn.apply(this_arg, arguments);
      };
    };
    contains = function(queried_item, collection) {
      var item, _i, _len;
      for (_i = 0, _len = collection.length; _i < _len; _i++) {
        item = collection[_i];
        if (queried_item === item) {
          return true;
        }
      }
      return false;
    };
    delay = function(delay_millis, fn) {
      return setTimeout(fn, delay_millis);
    };
    find_by_first_value_as_key = function(value, list_of_lists) {
      var KEY_IDX, VAL_IDX, plain_list, _i, _len;
      KEY_IDX = 0;
      VAL_IDX = 1;
      for (_i = 0, _len = list_of_lists.length; _i < _len; _i++) {
        plain_list = list_of_lists[_i];
        if (plain_list[KEY_IDX] === value) {
          return plain_list[VAL_IDX];
        }
      }
    };
    indexOf = function(list, searched_item) {
      var idx, item, _i, _len;
      for (idx = _i = 0, _len = list.length; _i < _len; idx = ++_i) {
        item = list[idx];
        if (item === searched_item) {
          return idx;
        }
      }
      return -1;
    };
    invoke = function(method_name, list) {
      var item, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        item = list[_i];
        _results.push(item[method_name]());
      }
      return _results;
    };
    map = function(fn, collection) {
      var item, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = collection.length; _i < _len; _i++) {
        item = collection[_i];
        _results.push(fn(item));
      }
      return _results;
    };
    multicall = function(functions) {
      return function() {
        var fn, _i, _len;
        for (_i = 0, _len = functions.length; _i < _len; _i++) {
          fn = functions[_i];
          fn.apply(this, arguments);
        }
      };
    };
    partial = function() {
      var fn, partial_args;
      fn = arguments[0];
      partial_args = Array.prototype.slice.call(arguments, 1);
      return function() {
        return fn.apply(this, partial_args.concat(Array.prototype.slice.call(arguments)));
      };
    };
    pluck = function(list, key_name) {
      var item, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        item = list[_i];
        _results.push(item[key_name]);
      }
      return _results;
    };
    remove_at = function(collection, index_to_remove) {
      return collection.splice(index_to_remove, 1);
    };
    union = function(list1, list2) {
      var item, result, _i, _len;
      result = list1.slice();
      for (_i = 0, _len = list2.length; _i < _len; _i++) {
        item = list2[_i];
        if (!(contains(item, list1))) {
          result.push(item);
        }
      }
      return result;
    };
    values = function(object) {
      var key, keys, _i, _len, _results;
      keys = Object.keys(object);
      _results = [];
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        _results.push(object[key]);
      }
      return _results;
    };
    return {
      bind: bind,
      contains: contains,
      delay: delay,
      find_by_first_value_as_key: find_by_first_value_as_key,
      indexOf: indexOf,
      invoke: invoke,
      map: map,
      multicall: multicall,
      partial: partial,
      pluck: pluck,
      remove_at: remove_at,
      union: union,
      values: values
    };
  });

}).call(this);
