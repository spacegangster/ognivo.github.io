// Generated by CoffeeScript 1.7.1
(function() {
  define(function() {
    var Emitter;
    return Emitter = (function() {
      function Emitter() {
        this.handlers = {};
      }


      /*
      Unbinds events.
      By default function removes all handlers from all events.
      @param {string} event_name if specified, removes handlers of only that event.
      @param {function} handler if specified, unbinds only that one handler.
       */

      Emitter.prototype.off = function(event_name, handler) {
        var event_handlers, i, _ref;
        if (!event_name) {
          _ref = this.handlers;
          for (event_name in _ref) {
            event_handlers = _ref[event_name];
            event_handlers.length = 0;
          }
        } else if (!handler) {
          this.handlers[event_name].length = 0;
        } else {
          event_handlers = this.handlers[event_name];
          i = event_handlers.length;
          while (--i >= 0) {
            if (event_handlers[i] === handler) {
              event_handlers.splice(i, 1);
            }
          }
        }
      };


      /*
      Binds handler to the specified event
       */

      Emitter.prototype.on = function(event_name, handler) {
        var handlers;
        handlers = this.handlers;
        handlers[event_name] = handlers[event_name] || [];
        handlers[event_name].push(handler);
      };


      /*
      Emits specified event with given arguments array.
      I chose the array form to visually separate event emissions
      from simple method calls.
      Beware that args array is not cloned.
      @param event_name {string}
      @param args {array}
       */

      Emitter.prototype.emit = function(event_name, args) {
        var handlers, hlen, i, res;
        handlers = this.handlers[event_name];
        if (!handlers) {
          return;
        }
        i = -1;
        res = null;
        while (++i < (hlen = handlers.length)) {
          res = handlers[i].apply(this, args);
          if ((typeof res === 'boolean') && !res) {
            return;
          }
        }
      };

      return Emitter;

    })();
  });

}).call(this);
