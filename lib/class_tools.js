// Generated by CoffeeScript 1.7.1
(function() {
  var __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['./functions'], function(functions) {
    var indexOf, index_of_key_in_collection, merge_event_tables, merge_partial_initializers, mix_of, multicall, name_isnt_reserved, pluck, to_objects_array, union;
    indexOf = functions.indexOf, multicall = functions.multicall, pluck = functions.pluck, union = functions.union;
    index_of_key_in_collection = function(key, collection) {
      return indexOf(pluck(collection, '0'), key);
    };
    name_isnt_reserved = function(member_name) {
      return !(member_name === 'blueprint' || member_name === 'event_table');
    };
    to_objects_array = function(mixins) {
      var mixin_entry, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = mixins.length; _i < _len; _i++) {
        mixin_entry = mixins[_i];
        _results.push((('function' === typeof mixin_entry) && mixin_entry.prototype) || mixin_entry);
      }
      return _results;
    };
    merge_partial_initializers = function(mixins) {
      return multicall(pluck(mixins, 'partial_init'));
    };
    merge_event_tables = function() {
      var index_of, remitter, remitter_idx, remitter_row, resulting_table, revent_idx, revent_row, revents, semitter, sevent, sevents, source_table, sreactions, tables, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      tables = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      resulting_table = [];
      index_of = index_of_key_in_collection;
      for (_i = 0, _len = tables.length; _i < _len; _i++) {
        source_table = tables[_i];
        for (_j = 0, _len1 = source_table.length; _j < _len1; _j++) {
          _ref = source_table[_j], semitter = _ref[0], sevents = _ref[1];
          remitter_idx = index_of(semitter, resulting_table);
          remitter_row = null;
          revents = null;
          if (remitter_idx === -1) {
            revents = [];
            remitter_row = [semitter, revents];
            resulting_table.push(remitter_row);
          } else {
            _ref1 = resulting_table[remitter_idx], remitter = _ref1[0], revents = _ref1[1];
          }
          for (_k = 0, _len2 = sevents.length; _k < _len2; _k++) {
            _ref2 = sevents[_k], sevent = _ref2[0], sreactions = _ref2[1];
            revent_idx = index_of(sevent, revents);
            if (revent_idx === -1) {
              revent_row = [sevent, sreactions];
              revents.push(revent_row);
            } else {
              revent_row = revents[revent_idx];
              revent_row[1] = union(revent_row[1], sreactions);
            }
          }
        }
      }
      return resulting_table;
    };
    mix_of = function() {
      var Base, Mixed, member, member_name, mix_proto, mixin, mixins, _i, _len;
      Base = arguments[0], mixins = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      mixins = to_objects_array(mixins);
      Mixed = (function(_super) {
        __extends(Mixed, _super);

        function Mixed() {
          return Mixed.__super__.constructor.apply(this, arguments);
        }

        return Mixed;

      })(Base);
      mix_proto = Mixed.prototype;
      for (_i = 0, _len = mixins.length; _i < _len; _i++) {
        mixin = mixins[_i];
        for (member_name in mixin) {
          member = mixin[member_name];
          if (name_isnt_reserved(member_name)) {
            mix_proto[member_name] = member;
          }
        }
      }
      mixins.unshift(Base.prototype);
      Mixed.prototype.partial_init = merge_partial_initializers(mixins);
      return Mixed;
    };
    return {
      merge_blueprints: merge_blueprints,
      merge_events: merge_event_tables,
      merge_event_tables: merge_event_tables,
      merge_partial_initializers: merge_partial_initializers,
      mix_of: mix_of
    };
  });

}).call(this);
